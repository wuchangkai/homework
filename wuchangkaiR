## Put comments here that give an overall description of what your
## functions do

## Write a short comment describing this function
## Create function to cache matrix
##x is initialized as a function argument and the default value of x is an empty matrix
makeCacheMatrix <- function(x = matrix()) {
  ##Assign null value to the variable s
  s<-NULL
  
  #set() takes an argument that is named as y
  set <- function(y) {
    ##Assign the input argument to the x object in the parent environment
    x <<- y
    ##Assign the value of NULL to the s object in the parent environment.
    ##This line of code clears any value of m that had been cached by a prior execution of cacheSolve().
    ##Therefore, if there is already a valid inverse of matrix cached in s, 
    ##whenever x is reset, the value of m cached in the memory of the object is cleared, 
    ##forcing subsequent calls to cachesolve() to inverse the matrix rather than retrieving the wrong value from cache.
    s<<-NULL
  }
  ##x is not defined within get(), R retrieves it from the parent environment of makeCahceMatrix()
  get <- function() x
  ##s is defined in the parent environment and we need to access it after setsolve() completes
  setsolve <- function(solve) s <<- solve
  #defines the getter for the inverse of matrix 
  getsolve <- function() s
  ##assigns each of these functions as an element within a list(), and returns it to the parent environment.
  ##Naming the list elements is what allows us to use the $ form of the extract operator to access the functions by name.
  list(set = set, get = get,
       setsolve = setsolve,
       getsolve = getsolve)

}


## Write a short comment describing this function
##cacheSolve is required to populate and/or retrieve the inverse of matrix from an object of type makecachematrix()
##cacheSolve starts with a single argument, x, and an ellipsis that allows the caller to pass additional arguments into the function.
cacheSolve <- function(x, ...) {
  
  ## retrieve a inverse from the object passed in as the argument. 
  m <- x$getsolve()
  ##Then it checks to see whether the result is NULL. 
  ##Since makematrix() sets the cached solve to NULL whenever a new matrix is set into the object, 
  ##if the value here is not equal to NULL, we have a valid, cached inverse and can return it to the parent environment.
    if(!is.null(m)){
    message("getting cached data")
    ## return the inverse of the matrix if m is not nulll
    return(m)
    }
  
  ##If the result of !is.null(m) is FALSE, cacheSolve() gets the matrix from the input object, 
  ##calculates a inverse, uses the setsolve() function on the input object to set the inverse in the input object, 
  ##and then returns the value of the mean to the parent environment by printing the inverse object.
  data <- x$get()
  m_calculated<- solve(data)
  x$setsolve(m_calculated)
  m_calculated
}
